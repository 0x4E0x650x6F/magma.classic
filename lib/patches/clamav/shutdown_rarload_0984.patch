diff -r 51f1865d294d libclamav/clamav.h
--- a/libclamav/clamav.h	Thu Oct 09 13:45:14 2014 -0500
+++ b/libclamav/clamav.h	Thu Oct 09 13:48:31 2014 -0500
@@ -174,6 +174,7 @@
 
 #define CL_INIT_DEFAULT	0x0
 extern int cl_init(unsigned int initoptions);
+extern void cl_shutdown(void);
 
 extern struct cl_engine *cl_engine_new(void);
 
diff -r 51f1865d294d libclamav/mbox.c
--- a/libclamav/mbox.c	Thu Oct 09 13:45:14 2014 -0500
+++ b/libclamav/mbox.c	Thu Oct 09 13:48:31 2014 -0500
@@ -2371,6 +2371,30 @@
 }
 
 /*
+ * Cleanup the various lookup tables
+ */
+void
+cli_mbox_shutdown(void)
+{
+
+#ifdef	CL_THREAD_SAFE
+	pthread_mutex_lock(&tables_mutex);
+#endif
+	if(rfc821) {
+		tableDestroy(rfc821);
+		rfc821 = NULL;
+	}
+	if(subtype) {
+		tableDestroy(subtype);
+		subtype = NULL;
+	}
+#ifdef	CL_THREAD_SAFE
+			pthread_mutex_unlock(&tables_mutex);
+#endif
+
+}
+
+/*
  * If there's a HTML text version use that, otherwise
  * use the first text part, otherwise just use the
  * first one around. HTML text is most likely to include
diff -r 51f1865d294d libclamav/mbox.h
--- a/libclamav/mbox.h	Thu Oct 09 13:45:14 2014 -0500
+++ b/libclamav/mbox.h	Thu Oct 09 13:48:31 2014 -0500
@@ -52,4 +52,6 @@
 size_t	strstrip(char *s);	/* remove trailing white space */
 int	cli_mbox(const char *dir, cli_ctx *ctx);
 
+void cli_mbox_shutdown(void);
+
 #endif /* __MBOX_H */
diff -r 51f1865d294d libclamav/message.c
--- a/libclamav/message.c	Thu Oct 09 13:45:14 2014 -0500
+++ b/libclamav/message.c	Thu Oct 09 13:48:31 2014 -0500
@@ -152,6 +152,32 @@
 	255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 };
 
+static table_t *mime_table = NULL;
+
+#ifdef	CL_THREAD_SAFE
+	static pthread_mutex_t mime_mutex = PTHREAD_MUTEX_INITIALIZER;
+#endif
+
+/*
+ * Cleanup the various lookup tables
+ */
+void
+cli_mime_shutdown(void)
+{
+
+#ifdef	CL_THREAD_SAFE
+	pthread_mutex_lock(&mime_mutex);
+#endif
+	if(mime_table) {
+		tableDestroy(mime_table);
+		mime_table = NULL;
+	}
+#ifdef	CL_THREAD_SAFE
+			pthread_mutex_unlock(&mime_mutex);
+#endif
+
+}
+
 message *
 messageCreate(void)
 {
@@ -215,12 +241,8 @@
 int
 messageSetMimeType(message *mess, const char *type)
 {
-#ifdef	CL_THREAD_SAFE
-	static pthread_mutex_t mime_mutex = PTHREAD_MUTEX_INITIALIZER;
-#endif
 	const struct mime_map *m;
 	int typeval;
-	static table_t *mime_table;
 
 	assert(mess != NULL);
 	if(type == NULL) {
diff -r 51f1865d294d libclamav/message.h
--- a/libclamav/message.h	Thu Oct 09 13:45:14 2014 -0500
+++ b/libclamav/message.h	Thu Oct 09 13:48:31 2014 -0500
@@ -85,4 +85,6 @@
 int	messageContainsVirus(const message *m);
 int messageSavePartial(message *m, const char *dir, const char *id, unsigned part);
 
+void cli_mime_shutdown(void);
+
 #endif	/*_MESSAGE_H*/
diff -r 51f1865d294d libclamav/others.c
--- a/libclamav/others.c	Thu Oct 09 13:45:14 2014 -0500
+++ b/libclamav/others.c	Thu Oct 09 13:48:31 2014 -0500
@@ -171,25 +171,35 @@
     return rhandle;
 }
 
+#include <dlfcn.h>
 static void cli_rarload(void) {
-    lt_dlhandle rhandle;
 
-    if(is_rar_initd) return;
+	lt_dlhandle rhandle = NULL;
+
+  if(is_rar_initd) {
+  	return;
+  }
+
     is_rar_initd = 1;
 
-    rhandle = lt_dlfind("libclamunrar_iface", "unrar");
-    if (!rhandle)
+  if (!(*(void **)(&cli_unrar_open) = (void *)dlsym((void *)0, "libclamunrar_iface_LTX_unrar_open")) ||
+		!(*(void **)(&cli_unrar_extract_next_prepare) = dlsym(NULL, "libclamunrar_iface_LTX_unrar_extract_next_prepare")) ||
+		!(*(void **)(&cli_unrar_extract_next) = dlsym(NULL, "libclamunrar_iface_LTX_unrar_extract_next")) ||
+		!(*(void **)(&cli_unrar_close) = dlsym(NULL, "libclamunrar_iface_LTX_unrar_close"))) {
+
+	  if (!(rhandle = lt_dlfind("libclamunrar_iface", "unrar"))) {
 	return;
+	  }
 
     if (!(cli_unrar_open = (int(*)(int, const char *, unrar_state_t *))lt_dlsym(rhandle, "libclamunrar_iface_LTX_unrar_open")) ||
 	!(cli_unrar_extract_next_prepare = (int(*)(unrar_state_t *, const char *))lt_dlsym(rhandle, "libclamunrar_iface_LTX_unrar_extract_next_prepare")) ||
 	!(cli_unrar_extract_next = (int(*)(unrar_state_t *, const char *))lt_dlsym(rhandle, "libclamunrar_iface_LTX_unrar_extract_next")) ||
-	!(cli_unrar_close = (void(*)(unrar_state_t *))lt_dlsym(rhandle, "libclamunrar_iface_LTX_unrar_close"))
-	) {
-	/* ideally we should never land here, we'd better warn so */
+-	  		!(cli_unrar_close = (void(*)(unrar_state_t *))lt_dlsym(rhandle, "libclamunrar_iface_LTX_unrar_close"))) {
         cli_warnmsg("Cannot resolve: %s (version mismatch?) - unrar support unavailable\n", lt_dlerror());
         return;
     }
+	}
+
     have_rar = 1;
 }
 
@@ -313,6 +323,14 @@
     return CL_SUCCESS;
 }
 
+void cl_shutdown(void) {
+	cli_mbox_shutdown();
+	cli_mime_shutdown();
+	if (lt_dlexit()) {
+		cli_errmsg("lt_dlexit: Library exit error, probably because of an invalid reference counter");
+	}
+}
+
 struct cl_engine *cl_engine_new(void)
 {
 	struct cl_engine *new;
